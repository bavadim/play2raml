@import raml2play.TemplateHelpers._
@import raml2play.model._

@(sourceInfo: RoutesSourceInfo, pkg: Option[String], imports: Seq[String],
  deps: Seq[Dependency[Rule]], rules: Seq[Dependency[Rule]])
// @@GENERATOR:raml2play
// @@SOURCE:@sourceInfo.source
// @@DATE:@sourceInfo.date

@for(p <- pkg) {package @p}

import play.core.routing._
import play.core.routing.HandlerInvokerFactory._
import play.core.j._
import java.time.ZonedDateTime
import Bindables._

import play.api.mvc._
@for(i <- imports) {
import @if(!i.startsWith("_root_.")){_root_.}@i}

class Routes(
  override val errorHandler: play.api.http.HttpErrorHandler, @for(dep <- deps){
  @dep.ident: @dep.clazz,}
  val prefix: String
) extends GeneratedRouter @ob

   @@javax.inject.Inject()
   def this(errorHandler: play.api.http.HttpErrorHandler@for(dep <- deps) {,
    @dep.ident: @dep.clazz}
  ) = this(errorHandler, @for(dep <- deps){@dep.ident, }"/")

  import ReverseRouteContext.empty

  def withPrefix(prefix: String): Routes = @ob
    @(pkg.getOrElse("_routes_")).RoutesPrefix.setPrefix(prefix)
    new Routes(errorHandler, @for(dep <- deps){@dep.ident, }prefix)
  @cb

  private[this] val defaultPrefix: String = @ob
    if (this.prefix.endsWith("/")) "" else "/"
  @cb

  def documentation = List(@for((dep, index) <- rules.zipWithIndex) {
    @dep.rule match {
      case Rule(verb, path, call, _) if path.parts.isEmpty => {(@tq@verb@tq, this.prefix, @tq@call@tq)}
      case Rule(verb, path, call, _) => {(@tq@verb@tq, this.prefix + (if(this.prefix.endsWith("/")) "" else "/") + @encodeStringConstant(path.toString), @tq@call@tq)}
  },}
    Nil
  ).foldLeft(List.empty[(String,String,String)]) { (s,e) => e.asInstanceOf[Any] match {
    case r @@ (_,_,_) => s :+ r.asInstanceOf[(String,String,String)]
    case l => s ++ l.asInstanceOf[List[(String,String,String)]]
  }}

@for((dep, index) <- rules.zipWithIndex){@dep.rule match {
case route @ Rule(verb, path, call, comments) => {
  private[this] lazy val @routeIdentifier(route, index) = Route("@verb.value",
    PathPattern(List(StaticPart(this.prefix)@if(path.parts.nonEmpty) {, StaticPart(this.defaultPrefix), }@path.parts.map(_.toString).mkString(", ")))
  )
  private[this] lazy val @invokerIdentifier(route, index) = createInvoker(
    @injectedControllerMethodCall(route, dep.ident, p => s"fakeValue[${p.paramType}]"),
    HandlerDef(this.getClass.getClassLoader,
      "@for(p <- pkg) {@p}",
      "@(call.packageName).@call.controller",
      "@call.method",
      @call.parameters.filterNot(_.isEmpty).map(params => params.map(p => "classOf[" + p.paramType + "]").mkString(", ")).map("Seq(" + _ + ")").getOrElse("Nil"),
      "@verb",
      @encodeStringConstant(comments.map(_.comment).mkString("\n")),
      this.prefix + @encodeStringConstant(path.toString)
    )
  )
}
}}

  def routes: PartialFunction[RequestHeader, Handler] = @ob
  @if(rules.isEmpty) {
    Map.empty
  } else {@for((dep, index) <- rules.zipWithIndex){@dep.rule match {
  case route @ Rule(_, _, _, _) => {
    case @(routeIdentifier(route, index))(params) =>
      call@(routeBinding(route)) @ob @tupleNames(route)
        @paramsChecker(route) @(invokerIdentifier(route, index)).call(@injectedControllerMethodCall(route, dep.ident, x => safeKeyword(x.name)))
      @cb
  }
  }}}@cb
@cb